datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "windows", "darwin", "darwin-arm64"]
}

model Interview {
  id               String    @id @default(uuid())
  created_at       DateTime  @default(now())
  title            String
  problem_count    Int
  transcript_length Int
  analysis_data    Json      // Keeping temporarily for migration backup
  project_id       String?   @map("project_id")
  participants     String?
  user             User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           String?
  project          Project?  @relation(fields: [project_id], references: [id], onDelete: SetNull)
  personas         Persona[]
  problemAreas     ProblemArea[] // Added relation

  @@map("interviews")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String
  sessions      Session[]
  interviews    Interview[]
  ownedProjects Project[]
  personas      Persona[]

  @@map("users")
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String?
  updatedAt   DateTime    @updatedAt
  interviews  Interview[]
  ownerId     String
  owner       User        @relation(fields: [ownerId], references: [id])

  @@map("projects")
}

model Persona {
  id          String      @id @default(uuid())
  name        String      // Name of the persona
  color       String      // Identifier for chosen color (e.g., "blue", "green") - Now Required

  userId      String      // Foreign key to the User who owns this persona
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  interviews  Interview[] // Many-to-many relation with Interviews

  @@unique([userId, name]) // Ensure persona names are unique per user
  @@map("personas")
}

// Note: VerificationToken is required for password reset functionality
// If you need that feature later, this model can be added back

// Added models
model ProblemArea {
  id                  String    @id @default(uuid())
  interview_id        String
  interview           Interview @relation(fields: [interview_id], references: [id], onDelete: Cascade)
  title               String
  description         String    @db.Text
  is_confirmed        Boolean   @default(false)
  priority            String?   // Added to support L, M, S priority values
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  excerpts            Excerpt[]

  @@index([interview_id])
  @@map("problem_areas")
}

model Excerpt {
  id              String      @id @default(uuid())
  problem_area_id String
  problemArea     ProblemArea @relation(fields: [problem_area_id], references: [id], onDelete: Cascade)
  quote           String      @db.Text
  categories      String[]
  insight         String      @db.Text
  chunk_number    Int

  @@index([problem_area_id])
  @@map("excerpts")
} 